definitions:
  order.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  order.Order:
    properties:
      created_at:
        type: string
      customer:
        type: string
      id:
        type: integer
      lines:
        items:
          $ref: '#/definitions/order.OrderLine'
        type: array
      updated_at:
        type: string
      warehouse_id:
        type: integer
    type: object
  order.OrderLine:
    properties:
      created_at:
        type: string
      id:
        type: integer
      quantity:
        type: integer
      sku:
        type: string
      unit_cost:
        type: integer
      updated_at:
        type: string
    type: object
  order.RequestBody:
    properties:
      customer:
        type: string
      lines:
        items:
          properties:
            quantity:
              type: integer
            sku:
              type: string
            unit_cost:
              type: integer
          type: object
        type: array
      warehouse_id:
        type: integer
    type: object
  product.Article:
    properties:
      amount_of:
        type: integer
      available_inventory:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  product.ArticleRequestBody:
    properties:
      name:
        type: string
      stock:
        type: integer
    type: object
  product.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  product.Product:
    properties:
      articles:
        items:
          $ref: '#/definitions/product.Article'
        type: array
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: integer
      sellable_inventory:
        type: integer
      updated_at:
        type: string
    type: object
  product.ProductArticle:
    properties:
      amount_of:
        type: integer
      available_inventory:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      productID:
        type: integer
      stock:
        type: integer
      updated_at:
        type: string
    type: object
  product.ProductRequestBody:
    properties:
      articles:
        items:
          properties:
            amount_of:
              type: integer
            id:
              type: integer
          type: object
        type: array
      name:
        type: string
      price:
        type: integer
    type: object
  warehouse.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  warehouse.RequestBody:
    properties:
      name:
        type: string
    type: object
  warehouse.Warehouse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
paths:
  /articles/:
    get:
      consumes:
      - application/json
      description: Get all articles
      operationId: list-articles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/product.Article'
            type: array
      summary: Get all articles
      tags:
      - articles
    post:
      consumes:
      - application/json
      description: Create a article with given data
      operationId: create-article
      parameters:
      - description: Article
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/product.ArticleRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.Article'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/product.ErrorResponse'
      summary: Create a article with given data
      tags:
      - articles
  /articles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a article by id
      operationId: delete-article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: NoContent
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/product.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/product.ErrorResponse'
      summary: Delete a article by id
      tags:
      - articles
    get:
      consumes:
      - application/json
      description: Get single article by id
      operationId: get-article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.Article'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/product.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/product.ErrorResponse'
      summary: Get single article by id
      tags:
      - articles
    put:
      consumes:
      - application/json
      description: Update a article with given data
      operationId: update-article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Article
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/product.ArticleRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.Article'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/product.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/product.ErrorResponse'
      summary: Update a article with given data
      tags:
      - articles
  /orders/:
    get:
      consumes:
      - application/json
      description: Get all orders
      operationId: list-orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/order.Order'
            type: array
      summary: Get all orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a order with given data
      operationId: create-order
      parameters:
      - description: Order
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/order.RequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/order.ErrorResponse'
      summary: Create a order with given data
      tags:
      - orders
  /orders/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a order by id
      operationId: delete-order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: NoContent
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/order.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/order.ErrorResponse'
      summary: Delete a order by id
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Get single order by id
      operationId: get-order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/order.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/order.ErrorResponse'
      summary: Get single order by id
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: Update a order with given data
      operationId: update-order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Order
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/order.RequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.Order'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/order.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/order.ErrorResponse'
      summary: Update a order with given data
      tags:
      - orders
  /products/:
    get:
      consumes:
      - application/json
      description: Get all products
      operationId: list-products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/product.ProductArticle'
            type: array
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a article with given data
      operationId: create-product
      parameters:
      - description: Product
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/product.ProductRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.Article'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/product.ErrorResponse'
      summary: Create a article with given data
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by id
      operationId: delete-product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: NoContent
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/product.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/product.ErrorResponse'
      summary: Delete a product by id
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get single product by id
      operationId: get-product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/product.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/product.ErrorResponse'
      summary: Get single product by id
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update a product with given data
      operationId: update-product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/product.ProductRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/product.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/product.ErrorResponse'
      summary: Update a product with given data
      tags:
      - products
  /warehouses/:
    get:
      consumes:
      - application/json
      description: Get all warehouses
      operationId: list-warehouse
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/warehouse.Warehouse'
            type: array
      summary: Get all warehouses
      tags:
      - warehouses
    post:
      consumes:
      - application/json
      description: Create a warehouse with given data
      operationId: create-warehouse
      parameters:
      - description: Warehouse
        in: body
        name: warehouse
        required: true
        schema:
          $ref: '#/definitions/warehouse.RequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/warehouse.Warehouse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/warehouse.ErrorResponse'
      summary: Create a warehouse with given data
      tags:
      - warehouses
  /warehouses/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a warehouse by id
      operationId: delete-warehouse
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: NoContent
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/warehouse.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/warehouse.ErrorResponse'
      summary: Delete a warehouse by id
      tags:
      - warehouses
    get:
      consumes:
      - application/json
      description: Get single warehouse by id
      operationId: get-warehouse
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/warehouse.Warehouse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/warehouse.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/warehouse.ErrorResponse'
      summary: Get single warehouse by id
      tags:
      - warehouses
    put:
      consumes:
      - application/json
      description: Update a warehouse with given data
      operationId: update-warehouse
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      - description: Warehouse
        in: body
        name: warehouse
        required: true
        schema:
          $ref: '#/definitions/warehouse.RequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/warehouse.Warehouse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/warehouse.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/warehouse.ErrorResponse'
      summary: Update a warehouse with given data
      tags:
      - warehouses
swagger: "2.0"
